// Code generated by goa v3.2.6, DO NOT EDIT.
//
// chargewatch HTTP server
//
// Command:
// $ goa gen chargewatch/design

package server

import (
	chargewatch "chargewatch/gen/chargewatch"
	"context"
	"net/http"
	"regexp"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the chargewatch service endpoint HTTP handlers.
type Server struct {
	Mounts           []*MountPoint
	ListDevices      http.Handler
	CreateDevice     http.Handler
	UpdateCharge     http.Handler
	GetChargeHistory http.Handler
	UpdateDevice     http.Handler
	CORS             http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the chargewatch service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *chargewatch.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListDevices", "GET", "/user/{userID}/devices"},
			{"CreateDevice", "POST", "/user/{userID}/devices"},
			{"UpdateCharge", "POST", "/devices/{deviceID}/charge"},
			{"GetChargeHistory", "GET", "/devices/{deviceID}/chargeHistory"},
			{"UpdateDevice", "POST", "/user/{userID}/devices/{deviceID}"},
			{"CORS", "OPTIONS", "/user/{userID}/devices"},
			{"CORS", "OPTIONS", "/devices/{deviceID}/charge"},
			{"CORS", "OPTIONS", "/devices/{deviceID}/chargeHistory"},
			{"CORS", "OPTIONS", "/user/{userID}/devices/{deviceID}"},
		},
		ListDevices:      NewListDevicesHandler(e.ListDevices, mux, decoder, encoder, errhandler, formatter),
		CreateDevice:     NewCreateDeviceHandler(e.CreateDevice, mux, decoder, encoder, errhandler, formatter),
		UpdateCharge:     NewUpdateChargeHandler(e.UpdateCharge, mux, decoder, encoder, errhandler, formatter),
		GetChargeHistory: NewGetChargeHistoryHandler(e.GetChargeHistory, mux, decoder, encoder, errhandler, formatter),
		UpdateDevice:     NewUpdateDeviceHandler(e.UpdateDevice, mux, decoder, encoder, errhandler, formatter),
		CORS:             NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "chargewatch" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListDevices = m(s.ListDevices)
	s.CreateDevice = m(s.CreateDevice)
	s.UpdateCharge = m(s.UpdateCharge)
	s.GetChargeHistory = m(s.GetChargeHistory)
	s.UpdateDevice = m(s.UpdateDevice)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the chargewatch endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListDevicesHandler(mux, h.ListDevices)
	MountCreateDeviceHandler(mux, h.CreateDevice)
	MountUpdateChargeHandler(mux, h.UpdateCharge)
	MountGetChargeHistoryHandler(mux, h.GetChargeHistory)
	MountUpdateDeviceHandler(mux, h.UpdateDevice)
	MountCORSHandler(mux, h.CORS)
}

// MountListDevicesHandler configures the mux to serve the "chargewatch"
// service "listDevices" endpoint.
func MountListDevicesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleChargewatchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/{userID}/devices", f)
}

// NewListDevicesHandler creates a HTTP handler which loads the HTTP request
// and calls the "chargewatch" service "listDevices" endpoint.
func NewListDevicesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListDevicesRequest(mux, decoder)
		encodeResponse = EncodeListDevicesResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listDevices")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chargewatch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateDeviceHandler configures the mux to serve the "chargewatch"
// service "createDevice" endpoint.
func MountCreateDeviceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleChargewatchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/user/{userID}/devices", f)
}

// NewCreateDeviceHandler creates a HTTP handler which loads the HTTP request
// and calls the "chargewatch" service "createDevice" endpoint.
func NewCreateDeviceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateDeviceRequest(mux, decoder)
		encodeResponse = EncodeCreateDeviceResponse(encoder)
		encodeError    = EncodeCreateDeviceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createDevice")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chargewatch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateChargeHandler configures the mux to serve the "chargewatch"
// service "updateCharge" endpoint.
func MountUpdateChargeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleChargewatchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/devices/{deviceID}/charge", f)
}

// NewUpdateChargeHandler creates a HTTP handler which loads the HTTP request
// and calls the "chargewatch" service "updateCharge" endpoint.
func NewUpdateChargeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateChargeRequest(mux, decoder)
		encodeResponse = EncodeUpdateChargeResponse(encoder)
		encodeError    = EncodeUpdateChargeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateCharge")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chargewatch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetChargeHistoryHandler configures the mux to serve the "chargewatch"
// service "getChargeHistory" endpoint.
func MountGetChargeHistoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleChargewatchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/devices/{deviceID}/chargeHistory", f)
}

// NewGetChargeHistoryHandler creates a HTTP handler which loads the HTTP
// request and calls the "chargewatch" service "getChargeHistory" endpoint.
func NewGetChargeHistoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetChargeHistoryRequest(mux, decoder)
		encodeResponse = EncodeGetChargeHistoryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getChargeHistory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chargewatch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateDeviceHandler configures the mux to serve the "chargewatch"
// service "updateDevice" endpoint.
func MountUpdateDeviceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleChargewatchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/user/{userID}/devices/{deviceID}", f)
}

// NewUpdateDeviceHandler creates a HTTP handler which loads the HTTP request
// and calls the "chargewatch" service "updateDevice" endpoint.
func NewUpdateDeviceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateDeviceRequest(mux, decoder)
		encodeResponse = EncodeUpdateDeviceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateDevice")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chargewatch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service chargewatch.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleChargewatchOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/user/{userID}/devices", f)
	mux.Handle("OPTIONS", "/devices/{deviceID}/charge", f)
	mux.Handle("OPTIONS", "/devices/{deviceID}/chargeHistory", f)
	mux.Handle("OPTIONS", "/user/{userID}/devices/{deviceID}", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleChargewatchOrigin applies the CORS response headers corresponding to
// the origin for the service chargewatch.
func handleChargewatchOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Time, X-Api-Version")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST")
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
