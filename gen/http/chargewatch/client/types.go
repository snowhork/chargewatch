// Code generated by goa v3.2.6, DO NOT EDIT.
//
// chargewatch HTTP client types
//
// Command:
// $ goa gen chargewatch/design

package client

import (
	chargewatch "chargewatch/gen/chargewatch"

	goa "goa.design/goa/v3/pkg"
)

// UpdateDeviceRequestBody is the type of the "chargewatch" service
// "updateDevice" endpoint HTTP request body.
type UpdateDeviceRequestBody struct {
	// value [0,100]
	ChargeValue int `form:"chargeValue" json:"chargeValue" xml:"chargeValue"`
}

// ListDevicesResponseBody is the type of the "chargewatch" service
// "listDevices" endpoint HTTP response body.
type ListDevicesResponseBody struct {
	Devices []*DeviceResponseBody `form:"devices,omitempty" json:"devices,omitempty" xml:"devices,omitempty"`
}

// CreateDeviceResponseBody is the type of the "chargewatch" service
// "createDevice" endpoint HTTP response body.
type CreateDeviceResponseBody struct {
	Device *DeviceResponseBody `form:"device,omitempty" json:"device,omitempty" xml:"device,omitempty"`
}

// UpdateChargeResponseBody is the type of the "chargewatch" service
// "updateCharge" endpoint HTTP response body.
type UpdateChargeResponseBody struct {
	Device *DeviceResponseBody `form:"device,omitempty" json:"device,omitempty" xml:"device,omitempty"`
}

// GetChargeHistoryResponseBody is the type of the "chargewatch" service
// "getChargeHistory" endpoint HTTP response body.
type GetChargeHistoryResponseBody struct {
	ChargeHistory *ChargeHistoryResponseBody `form:"chargeHistory,omitempty" json:"chargeHistory,omitempty" xml:"chargeHistory,omitempty"`
}

// UpdateDeviceResponseBody is the type of the "chargewatch" service
// "updateDevice" endpoint HTTP response body.
type UpdateDeviceResponseBody struct {
	Device *DeviceResponseBody `form:"device,omitempty" json:"device,omitempty" xml:"device,omitempty"`
}

// CreateDeviceStatusInternalServerErrorResponseBody is the type of the
// "chargewatch" service "createDevice" endpoint HTTP response body for the
// "StatusInternalServerError" error.
type CreateDeviceStatusInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateChargeStatusBadRequestResponseBody is the type of the "chargewatch"
// service "updateCharge" endpoint HTTP response body for the
// "StatusBadRequest" error.
type UpdateChargeStatusBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeviceResponseBody is used to define fields on response body types.
type DeviceResponseBody struct {
	ID          *string             `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	UserID      *string             `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	Name        *string             `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Description *string             `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	State       *string             `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	Charge      *ChargeResponseBody `form:"charge,omitempty" json:"charge,omitempty" xml:"charge,omitempty"`
}

// ChargeResponseBody is used to define fields on response body types.
type ChargeResponseBody struct {
	Value     *int   `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	Charging  *bool  `form:"charging,omitempty" json:"charging,omitempty" xml:"charging,omitempty"`
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// ChargeRequestBodyRequestBody is used to define fields on request body types.
type ChargeRequestBodyRequestBody struct {
	Value     int   `form:"value" json:"value" xml:"value"`
	Charging  bool  `form:"charging" json:"charging" xml:"charging"`
	Timestamp int64 `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// ChargeHistoryResponseBody is used to define fields on response body types.
type ChargeHistoryResponseBody struct {
	DeviceID *string                  `form:"deviceID,omitempty" json:"deviceID,omitempty" xml:"deviceID,omitempty"`
	Logs     []*ChargeLogResponseBody `form:"logs,omitempty" json:"logs,omitempty" xml:"logs,omitempty"`
}

// ChargeLogResponseBody is used to define fields on response body types.
type ChargeLogResponseBody struct {
	DeviceID *string             `form:"deviceID,omitempty" json:"deviceID,omitempty" xml:"deviceID,omitempty"`
	Charge   *ChargeResponseBody `form:"charge,omitempty" json:"charge,omitempty" xml:"charge,omitempty"`
}

// NewUpdateDeviceRequestBody builds the HTTP request body from the payload of
// the "updateDevice" endpoint of the "chargewatch" service.
func NewUpdateDeviceRequestBody(p *chargewatch.UpdateDevicePayload) *UpdateDeviceRequestBody {
	body := &UpdateDeviceRequestBody{
		ChargeValue: p.ChargeValue,
	}
	return body
}

// NewListDevicesResultOK builds a "chargewatch" service "listDevices" endpoint
// result from a HTTP "OK" response.
func NewListDevicesResultOK(body *ListDevicesResponseBody) *chargewatch.ListDevicesResult {
	v := &chargewatch.ListDevicesResult{}
	v.Devices = make([]*chargewatch.Device, len(body.Devices))
	for i, val := range body.Devices {
		v.Devices[i] = unmarshalDeviceResponseBodyToChargewatchDevice(val)
	}

	return v
}

// NewCreateDeviceResultOK builds a "chargewatch" service "createDevice"
// endpoint result from a HTTP "OK" response.
func NewCreateDeviceResultOK(body *CreateDeviceResponseBody) *chargewatch.CreateDeviceResult {
	v := &chargewatch.CreateDeviceResult{}
	v.Device = unmarshalDeviceResponseBodyToChargewatchDevice(body.Device)

	return v
}

// NewCreateDeviceStatusInternalServerError builds a chargewatch service
// createDevice endpoint StatusInternalServerError error.
func NewCreateDeviceStatusInternalServerError(body *CreateDeviceStatusInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateChargeResultOK builds a "chargewatch" service "updateCharge"
// endpoint result from a HTTP "OK" response.
func NewUpdateChargeResultOK(body *UpdateChargeResponseBody) *chargewatch.UpdateChargeResult {
	v := &chargewatch.UpdateChargeResult{}
	if body.Device != nil {
		v.Device = unmarshalDeviceResponseBodyToChargewatchDevice(body.Device)
	}

	return v
}

// NewUpdateChargeStatusBadRequest builds a chargewatch service updateCharge
// endpoint StatusBadRequest error.
func NewUpdateChargeStatusBadRequest(body *UpdateChargeStatusBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetChargeHistoryResultOK builds a "chargewatch" service
// "getChargeHistory" endpoint result from a HTTP "OK" response.
func NewGetChargeHistoryResultOK(body *GetChargeHistoryResponseBody) *chargewatch.GetChargeHistoryResult {
	v := &chargewatch.GetChargeHistoryResult{}
	v.ChargeHistory = unmarshalChargeHistoryResponseBodyToChargewatchChargeHistory(body.ChargeHistory)

	return v
}

// NewUpdateDeviceResultOK builds a "chargewatch" service "updateDevice"
// endpoint result from a HTTP "OK" response.
func NewUpdateDeviceResultOK(body *UpdateDeviceResponseBody) *chargewatch.UpdateDeviceResult {
	v := &chargewatch.UpdateDeviceResult{}
	v.Device = unmarshalDeviceResponseBodyToChargewatchDevice(body.Device)

	return v
}

// ValidateListDevicesResponseBody runs the validations defined on
// ListDevicesResponseBody
func ValidateListDevicesResponseBody(body *ListDevicesResponseBody) (err error) {
	if body.Devices == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("devices", "body"))
	}
	for _, e := range body.Devices {
		if e != nil {
			if err2 := ValidateDeviceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateDeviceResponseBody runs the validations defined on
// CreateDeviceResponseBody
func ValidateCreateDeviceResponseBody(body *CreateDeviceResponseBody) (err error) {
	if body.Device == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("device", "body"))
	}
	if body.Device != nil {
		if err2 := ValidateDeviceResponseBody(body.Device); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateChargeResponseBody runs the validations defined on
// UpdateChargeResponseBody
func ValidateUpdateChargeResponseBody(body *UpdateChargeResponseBody) (err error) {
	if body.Device != nil {
		if err2 := ValidateDeviceResponseBody(body.Device); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetChargeHistoryResponseBody runs the validations defined on
// GetChargeHistoryResponseBody
func ValidateGetChargeHistoryResponseBody(body *GetChargeHistoryResponseBody) (err error) {
	if body.ChargeHistory == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chargeHistory", "body"))
	}
	if body.ChargeHistory != nil {
		if err2 := ValidateChargeHistoryResponseBody(body.ChargeHistory); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateDeviceResponseBody runs the validations defined on
// UpdateDeviceResponseBody
func ValidateUpdateDeviceResponseBody(body *UpdateDeviceResponseBody) (err error) {
	if body.Device == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("device", "body"))
	}
	if body.Device != nil {
		if err2 := ValidateDeviceResponseBody(body.Device); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateDeviceStatusInternalServerErrorResponseBody runs the
// validations defined on createDevice_StatusInternalServerError_response_body
func ValidateCreateDeviceStatusInternalServerErrorResponseBody(body *CreateDeviceStatusInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateChargeStatusBadRequestResponseBody runs the validations
// defined on updateCharge_StatusBadRequest_response_body
func ValidateUpdateChargeStatusBadRequestResponseBody(body *UpdateChargeStatusBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeviceResponseBody runs the validations defined on DeviceResponseBody
func ValidateDeviceResponseBody(body *DeviceResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state", "body"))
	}
	if body.Charge == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("charge", "body"))
	}
	if body.Charge != nil {
		if err2 := ValidateChargeResponseBody(body.Charge); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateChargeResponseBody runs the validations defined on ChargeResponseBody
func ValidateChargeResponseBody(body *ChargeResponseBody) (err error) {
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Charging == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("charging", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	return
}

// ValidateChargeHistoryResponseBody runs the validations defined on
// ChargeHistoryResponseBody
func ValidateChargeHistoryResponseBody(body *ChargeHistoryResponseBody) (err error) {
	if body.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deviceID", "body"))
	}
	if body.Logs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("logs", "body"))
	}
	for _, e := range body.Logs {
		if e != nil {
			if err2 := ValidateChargeLogResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChargeLogResponseBody runs the validations defined on
// ChargeLogResponseBody
func ValidateChargeLogResponseBody(body *ChargeLogResponseBody) (err error) {
	if body.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deviceID", "body"))
	}
	if body.Charge == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("charge", "body"))
	}
	if body.Charge != nil {
		if err2 := ValidateChargeResponseBody(body.Charge); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
