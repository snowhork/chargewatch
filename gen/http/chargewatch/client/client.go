// Code generated by goa v3.2.6, DO NOT EDIT.
//
// chargewatch client HTTP transport
//
// Command:
// $ goa gen chargewatch/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the chargewatch service endpoint HTTP clients.
type Client struct {
	// Healthcheck Doer is the HTTP client used to make requests to the healthcheck
	// endpoint.
	HealthcheckDoer goahttp.Doer

	// ListDevices Doer is the HTTP client used to make requests to the listDevices
	// endpoint.
	ListDevicesDoer goahttp.Doer

	// CreateDevice Doer is the HTTP client used to make requests to the
	// createDevice endpoint.
	CreateDeviceDoer goahttp.Doer

	// UpdateCharge Doer is the HTTP client used to make requests to the
	// updateCharge endpoint.
	UpdateChargeDoer goahttp.Doer

	// GetChargeHistory Doer is the HTTP client used to make requests to the
	// getChargeHistory endpoint.
	GetChargeHistoryDoer goahttp.Doer

	// UpdateDevice Doer is the HTTP client used to make requests to the
	// updateDevice endpoint.
	UpdateDeviceDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the chargewatch service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		HealthcheckDoer:      doer,
		ListDevicesDoer:      doer,
		CreateDeviceDoer:     doer,
		UpdateChargeDoer:     doer,
		GetChargeHistoryDoer: doer,
		UpdateDeviceDoer:     doer,
		CORSDoer:             doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// Healthcheck returns an endpoint that makes HTTP requests to the chargewatch
// service healthcheck server.
func (c *Client) Healthcheck() goa.Endpoint {
	var (
		decodeResponse = DecodeHealthcheckResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildHealthcheckRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.HealthcheckDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chargewatch", "healthcheck", err)
		}
		return decodeResponse(resp)
	}
}

// ListDevices returns an endpoint that makes HTTP requests to the chargewatch
// service listDevices server.
func (c *Client) ListDevices() goa.Endpoint {
	var (
		decodeResponse = DecodeListDevicesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListDevicesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDevicesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chargewatch", "listDevices", err)
		}
		return decodeResponse(resp)
	}
}

// CreateDevice returns an endpoint that makes HTTP requests to the chargewatch
// service createDevice server.
func (c *Client) CreateDevice() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateDeviceRequest(c.encoder)
		decodeResponse = DecodeCreateDeviceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateDeviceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDeviceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chargewatch", "createDevice", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCharge returns an endpoint that makes HTTP requests to the chargewatch
// service updateCharge server.
func (c *Client) UpdateCharge() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateChargeRequest(c.encoder)
		decodeResponse = DecodeUpdateChargeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateChargeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateChargeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chargewatch", "updateCharge", err)
		}
		return decodeResponse(resp)
	}
}

// GetChargeHistory returns an endpoint that makes HTTP requests to the
// chargewatch service getChargeHistory server.
func (c *Client) GetChargeHistory() goa.Endpoint {
	var (
		decodeResponse = DecodeGetChargeHistoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetChargeHistoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetChargeHistoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chargewatch", "getChargeHistory", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateDevice returns an endpoint that makes HTTP requests to the chargewatch
// service updateDevice server.
func (c *Client) UpdateDevice() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateDeviceRequest(c.encoder)
		decodeResponse = DecodeUpdateDeviceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateDeviceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDeviceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chargewatch", "updateDevice", err)
		}
		return decodeResponse(resp)
	}
}
