// Code generated by goa v3.2.6, DO NOT EDIT.
//
// chargewatch HTTP client CLI support package
//
// Command:
// $ goa gen chargewatch/design

package client

import (
	chargewatch "chargewatch/gen/chargewatch"
	"encoding/json"
	"fmt"
)

// BuildListDevicesPayload builds the payload for the chargewatch listDevices
// endpoint from CLI flags.
func BuildListDevicesPayload(chargewatchListDevicesUserID string) (*chargewatch.ListDevicesPayload, error) {
	var userID string
	{
		userID = chargewatchListDevicesUserID
	}
	v := &chargewatch.ListDevicesPayload{}
	v.UserID = userID

	return v, nil
}

// BuildCreateDevicePayload builds the payload for the chargewatch createDevice
// endpoint from CLI flags.
func BuildCreateDevicePayload(chargewatchCreateDeviceBody string, chargewatchCreateDeviceUserID string) (*chargewatch.CreateDevicePayload, error) {
	var err error
	var body struct {
		// device name
		Name *string `form:"name" json:"name" xml:"name"`
		// description
		Description string `form:"description" json:"description" xml:"description"`
	}
	{
		err = json.Unmarshal([]byte(chargewatchCreateDeviceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Occaecati beatae optio sapiente vitae.\",\n      \"name\": \"Et nesciunt aperiam voluptas.\"\n   }'")
		}
	}
	var userID string
	{
		userID = chargewatchCreateDeviceUserID
	}
	v := &chargewatch.CreateDevicePayload{
		Description: body.Description,
	}
	if body.Name != nil {
		v.Name = *body.Name
	}
	{
		var zero string
		if v.Description == zero {
			v.Description = ""
		}
	}
	v.UserID = userID

	return v, nil
}

// BuildUpdateChargePayload builds the payload for the chargewatch updateCharge
// endpoint from CLI flags.
func BuildUpdateChargePayload(chargewatchUpdateChargeBody string, chargewatchUpdateChargeDeviceID string) (*chargewatch.UpdateChargePayload, error) {
	var err error
	var body struct {
		ChargeValue *int  `form:"chargeValue" json:"chargeValue" xml:"chargeValue"`
		Charging    *bool `form:"charging" json:"charging" xml:"charging"`
	}
	{
		err = json.Unmarshal([]byte(chargewatchUpdateChargeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chargeValue\": 1204534250065173899,\n      \"charging\": false\n   }'")
		}
	}
	var deviceID string
	{
		deviceID = chargewatchUpdateChargeDeviceID
	}
	v := &chargewatch.UpdateChargePayload{}
	if body.ChargeValue != nil {
		v.ChargeValue = *body.ChargeValue
	}
	if body.Charging != nil {
		v.Charging = *body.Charging
	}
	v.DeviceID = deviceID

	return v, nil
}

// BuildGetChargeHistoryPayload builds the payload for the chargewatch
// getChargeHistory endpoint from CLI flags.
func BuildGetChargeHistoryPayload(chargewatchGetChargeHistoryDeviceID string) (*chargewatch.GetChargeHistoryPayload, error) {
	var deviceID string
	{
		deviceID = chargewatchGetChargeHistoryDeviceID
	}
	v := &chargewatch.GetChargeHistoryPayload{}
	v.DeviceID = deviceID

	return v, nil
}

// BuildUpdateDevicePayload builds the payload for the chargewatch updateDevice
// endpoint from CLI flags.
func BuildUpdateDevicePayload(chargewatchUpdateDeviceBody string, chargewatchUpdateDeviceUserID string, chargewatchUpdateDeviceDeviceID string) (*chargewatch.UpdateDevicePayload, error) {
	var err error
	var body struct {
		// value [0,100]
		ChargeValue *int `form:"chargeValue" json:"chargeValue" xml:"chargeValue"`
	}
	{
		err = json.Unmarshal([]byte(chargewatchUpdateDeviceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chargeValue\": 54\n   }'")
		}
	}
	var userID string
	{
		userID = chargewatchUpdateDeviceUserID
	}
	var deviceID string
	{
		deviceID = chargewatchUpdateDeviceDeviceID
	}
	v := &chargewatch.UpdateDevicePayload{}
	if body.ChargeValue != nil {
		v.ChargeValue = *body.ChargeValue
	}
	v.UserID = userID
	v.DeviceID = deviceID

	return v, nil
}
