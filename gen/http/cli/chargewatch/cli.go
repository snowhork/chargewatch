// Code generated by goa v3.2.6, DO NOT EDIT.
//
// chargewatch HTTP client CLI support package
//
// Command:
// $ goa gen chargewatch/design

package cli

import (
	chargewatchc "chargewatch/gen/http/chargewatch/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `chargewatch (list-devices|create-device|update-charge|get-charge-history|update-device)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` chargewatch list-devices --user-id "Aperiam quaerat."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		chargewatchFlags = flag.NewFlagSet("chargewatch", flag.ContinueOnError)

		chargewatchListDevicesFlags      = flag.NewFlagSet("list-devices", flag.ExitOnError)
		chargewatchListDevicesUserIDFlag = chargewatchListDevicesFlags.String("user-id", "REQUIRED", "userID")

		chargewatchCreateDeviceFlags      = flag.NewFlagSet("create-device", flag.ExitOnError)
		chargewatchCreateDeviceBodyFlag   = chargewatchCreateDeviceFlags.String("body", "REQUIRED", "")
		chargewatchCreateDeviceUserIDFlag = chargewatchCreateDeviceFlags.String("user-id", "REQUIRED", "userID")

		chargewatchUpdateChargeFlags        = flag.NewFlagSet("update-charge", flag.ExitOnError)
		chargewatchUpdateChargeBodyFlag     = chargewatchUpdateChargeFlags.String("body", "REQUIRED", "")
		chargewatchUpdateChargeDeviceIDFlag = chargewatchUpdateChargeFlags.String("device-id", "REQUIRED", "deviceID")

		chargewatchGetChargeHistoryFlags        = flag.NewFlagSet("get-charge-history", flag.ExitOnError)
		chargewatchGetChargeHistoryDeviceIDFlag = chargewatchGetChargeHistoryFlags.String("device-id", "REQUIRED", "deviceID")

		chargewatchUpdateDeviceFlags        = flag.NewFlagSet("update-device", flag.ExitOnError)
		chargewatchUpdateDeviceBodyFlag     = chargewatchUpdateDeviceFlags.String("body", "REQUIRED", "")
		chargewatchUpdateDeviceUserIDFlag   = chargewatchUpdateDeviceFlags.String("user-id", "REQUIRED", "userID")
		chargewatchUpdateDeviceDeviceIDFlag = chargewatchUpdateDeviceFlags.String("device-id", "REQUIRED", "deviceID")
	)
	chargewatchFlags.Usage = chargewatchUsage
	chargewatchListDevicesFlags.Usage = chargewatchListDevicesUsage
	chargewatchCreateDeviceFlags.Usage = chargewatchCreateDeviceUsage
	chargewatchUpdateChargeFlags.Usage = chargewatchUpdateChargeUsage
	chargewatchGetChargeHistoryFlags.Usage = chargewatchGetChargeHistoryUsage
	chargewatchUpdateDeviceFlags.Usage = chargewatchUpdateDeviceUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "chargewatch":
			svcf = chargewatchFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "chargewatch":
			switch epn {
			case "list-devices":
				epf = chargewatchListDevicesFlags

			case "create-device":
				epf = chargewatchCreateDeviceFlags

			case "update-charge":
				epf = chargewatchUpdateChargeFlags

			case "get-charge-history":
				epf = chargewatchGetChargeHistoryFlags

			case "update-device":
				epf = chargewatchUpdateDeviceFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "chargewatch":
			c := chargewatchc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-devices":
				endpoint = c.ListDevices()
				data, err = chargewatchc.BuildListDevicesPayload(*chargewatchListDevicesUserIDFlag)
			case "create-device":
				endpoint = c.CreateDevice()
				data, err = chargewatchc.BuildCreateDevicePayload(*chargewatchCreateDeviceBodyFlag, *chargewatchCreateDeviceUserIDFlag)
			case "update-charge":
				endpoint = c.UpdateCharge()
				data, err = chargewatchc.BuildUpdateChargePayload(*chargewatchUpdateChargeBodyFlag, *chargewatchUpdateChargeDeviceIDFlag)
			case "get-charge-history":
				endpoint = c.GetChargeHistory()
				data, err = chargewatchc.BuildGetChargeHistoryPayload(*chargewatchGetChargeHistoryDeviceIDFlag)
			case "update-device":
				endpoint = c.UpdateDevice()
				data, err = chargewatchc.BuildUpdateDevicePayload(*chargewatchUpdateDeviceBodyFlag, *chargewatchUpdateDeviceUserIDFlag, *chargewatchUpdateDeviceDeviceIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// chargewatchUsage displays the usage of the chargewatch command and its
// subcommands.
func chargewatchUsage() {
	fmt.Fprintf(os.Stderr, `Service is the chargewatch service interface.
Usage:
    %s [globalflags] chargewatch COMMAND [flags]

COMMAND:
    list-devices: ListDevices implements listDevices.
    create-device: CreateDevice implements createDevice.
    update-charge: UpdateCharge implements updateCharge.
    get-charge-history: GetChargeHistory implements getChargeHistory.
    update-device: UpdateDevice implements updateDevice.

Additional help:
    %s chargewatch COMMAND --help
`, os.Args[0], os.Args[0])
}
func chargewatchListDevicesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] chargewatch list-devices -user-id STRING

ListDevices implements listDevices.
    -user-id STRING: userID

Example:
    `+os.Args[0]+` chargewatch list-devices --user-id "Aperiam quaerat."
`, os.Args[0])
}

func chargewatchCreateDeviceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] chargewatch create-device -body JSON -user-id STRING

CreateDevice implements createDevice.
    -body JSON: 
    -user-id STRING: userID

Example:
    `+os.Args[0]+` chargewatch create-device --body '{
      "description": "Id omnis.",
      "name": "Asperiores vel."
   }' --user-id "Officiis quam eum quia sit consequatur ipsum."
`, os.Args[0])
}

func chargewatchUpdateChargeUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] chargewatch update-charge -body JSON -device-id STRING

UpdateCharge implements updateCharge.
    -body JSON: 
    -device-id STRING: deviceID

Example:
    `+os.Args[0]+` chargewatch update-charge --body '{
      "charge": {
         "charging": true,
         "timestamp": 6534498977651929528,
         "value": 4532680824102535020
      }
   }' --device-id "Sapiente vitae voluptas aperiam provident voluptatem vel."
`, os.Args[0])
}

func chargewatchGetChargeHistoryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] chargewatch get-charge-history -device-id STRING

GetChargeHistory implements getChargeHistory.
    -device-id STRING: deviceID

Example:
    `+os.Args[0]+` chargewatch get-charge-history --device-id "Esse impedit porro voluptas."
`, os.Args[0])
}

func chargewatchUpdateDeviceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] chargewatch update-device -body JSON -user-id STRING -device-id STRING

UpdateDevice implements updateDevice.
    -body JSON: 
    -user-id STRING: userID
    -device-id STRING: deviceID

Example:
    `+os.Args[0]+` chargewatch update-device --body '{
      "chargeValue": 93
   }' --user-id "Tempora labore." --device-id "Rerum expedita et velit ullam."
`, os.Args[0])
}
